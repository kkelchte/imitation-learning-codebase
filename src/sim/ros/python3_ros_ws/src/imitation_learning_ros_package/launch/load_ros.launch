<?xml version="1.0"?>
<launch>
    <!--######################## GENERAL ########################-->
    <arg name="random_seed" default="1234"/>
    <param name="random_seed" value="$(arg random_seed)"/>
    <arg name="output_path" default="/tmp"/>
    <param name="output_path" value="$(arg output_path)"/>
    <arg name="world_name" default="default"/>
    <rosparam command="load" file="$(env CODEDIR)/src/sim/ros/config/world/$(arg world_name).yml" ns="world"/>

    <!--######################## GAZEBO ########################-->
    <arg name="gazebo" default="false"/>
    <group if="$(arg gazebo)">
        <include file="$(find imitation_learning_ros_package)/launch/gazebo.launch">
            <arg name="world_name" value="$(env CODEDIR)/src/sim/ros/gazebo/worlds/$(arg world_name).world"/>
            <arg name="gui" value="false"/>
            <arg name="headless" default="true"/>
        </include>
    </group>

    <!--######################## ROBOTS ########################-->
    <arg name="robot_name" default="default"/>
    <rosparam command="load" file="$(env CODEDIR)/src/sim/ros/config/robot/$(arg robot_name).yml" ns="robot"/>

    <arg name="x_pos" default="0"/>
    <arg name="y_pos" default="0"/>
    <arg name="z_pos" default="0."/>
    <arg name="yaw_or" default="0"/>
    <!--    Distance between two drones used for double_drone_sim-->
    <arg name="distance_tracking_fleeing_m" default="3"/>
    <arg name="starting_height" default="1"/>
    <param name="starting_height" value="$(arg starting_height)" />

    <group if="$(eval arg('robot_name') == 'turtlebot_sim')">
          <param name="robot_description"
                 command="$(find xacro)/xacro --inorder $(env CODEDIR)/src/sim/ros/gazebo/urdf/turtlebot3_burger.urdf.xacro"/>
          <node pkg="gazebo_ros"
                type="spawn_model"
                name="spawn_urdf"
                args="-urdf -model turtlebot3_burger -x $(arg x_pos) -y $(arg y_pos)
                -Y $(arg yaw_or) -z $(arg z_pos) -param robot_description"
                output="log"/>
    </group>

    <group if="$(eval arg('robot_name') == 'drone_sim_down_cam' or arg('robot_name') == 'drone_sim')">
        <arg name="model_name" default="drone_sim"/>
        <!-- Spawn simulated quadrotor uav -->
        <include file="$(find hector_quadrotor_gazebo)/launch/spawn_quadrotor.launch">
            <!-- Note: do not change quadrotor model with model argument as then pose estimation fails to start and /ground_truth/state will not be published on which fsm.py depends to start the simulation.-->
            <arg name="x" value="$(arg x_pos)"/>
            <arg name="y" value="$(arg y_pos)"/>
            <arg name="z" value="$(arg z_pos)"/>
            <arg name="Y" default="$(arg yaw_or)"/>
            <arg name="model" default="$(env CODEDIR)/src/sim/ros/gazebo/urdf/$(arg model_name).gazebo.xacro"/>
        </include>
    </group>

    <group if="$(eval arg('robot_name') == 'bebop_real')">
        <include file="$(find bebop_driver)/launch/bebop_node.launch"/>
    </group>

    <group if="$(eval arg('robot_name') == 'turtlebot_real')">
        <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch">
            <arg name="model" value="burger" />
        </include>
    </group>

    <group if="$(eval arg('robot_name') == 'tello_real')">
        <include file="$(find tello_driver)/launch/tello_node.launch"/>
    </group>


    <group if="$(eval arg('robot_name') == 'double_drone_sim')">
        <arg name="model_name" default="drone_sim_wide_angle"/>
        <include file="$(find hector_quadrotor_gazebo)/launch/spawn_quadrotor.launch" ns="tracking">
            <!-- Note: do not change quadrotor model with model argument as then pose estimation fails to start and /ground_truth/state will not be published on which fsm.py depends to start the simulation.-->
            <arg name="name" default="tracking_quadrotor"/>
            <arg name="x" value="$(arg x_pos)"/>
            <arg name="y" value="$(arg y_pos)"/>
            <arg name="z" value="$(arg z_pos)"/>
            <arg name="Y" default="$(arg yaw_or)"/>
            <arg name="model" default="$(env CODEDIR)/src/sim/ros/gazebo/urdf/$(arg model_name).gazebo.xacro"/>
        </include>
        <include file="$(find hector_quadrotor_gazebo)/launch/spawn_quadrotor.launch" ns="fleeing">
            <!-- Note: do not change quadrotor model with model argument as then pose estimation fails to start and /ground_truth/state will not be published on which fsm.py depends to start the simulation.-->
            <arg name="name" default="fleeing_quadrotor"/>
            <arg name="x" value="$(eval arg('x_pos') + arg('distance_tracking_fleeing_m'))"/>
            <arg name="y" value="$(arg y_pos)"/>
            <arg name="z" value="$(arg z_pos)"/>
            <arg name="Y" default="$(eval 3.14 + arg('yaw_or'))"/>
            <arg name="model" default="$(env CODEDIR)/src/sim/ros/gazebo/urdf/$(arg model_name).gazebo.xacro"/>
        </include>
    </group>

    <!--######################## HELPER NODES ########################-->
    <arg name="fsm" default="false"/>
    <arg name="fsm_mode" default="SingleRun"/>
    <param name="/fsm/mode" value="$(arg fsm_mode)"/>
    <group if="$(arg fsm)">
        <node pkg="imitation_learning_ros_package"
              name="fsm"
              type="fsm.py"
              output="screen"/>
    </group>

    <arg name="control_mapping" default="false"/>
    <arg name="control_mapping_config" default="default"/>
    <rosparam command="load"
                  file="$(env CODEDIR)/src/sim/ros/config/control_mapping/$(arg control_mapping_config).yml"
                  ns="control_mapping"/>
    <group if="$(arg control_mapping)">
        <node pkg="imitation_learning_ros_package"
              name="control_mapping"
              type="control_mapping.py"
              output="screen"
              launch-prefix="bash -c 'sleep 6; $0 $@' "/>
    </group>

    <arg name="waypoint_indicator" default="false"/>
    <group if="$(arg waypoint_indicator)">
        <node pkg="imitation_learning_ros_package"
              name="waypoint_indicator"
              type="waypoint_indicator.py"
              output="screen"/>
    </group>

    <arg name="robot_mapping" default="false"/>
    <group if="$(arg robot_mapping)">
        <node pkg="imitation_learning_ros_package"
              name="robot_mapping"
              type="robot_mapping.py"
              output="screen"/>
    </group>

    <arg name="robot_display" default="false"/>
    <group if="$(arg robot_display)">
        <node pkg="imitation_learning_ros_package"
              name="robot_display"
              type="robot_display.py"
              output="screen"/>
    </group>

    <arg name="modified_state_publisher" default="false"/>
    <arg name="modified_state_publisher_mode" default="CombinedGlobalPoses"/>
    <param name="/modified_state_publisher/mode" value="$(arg modified_state_publisher_mode)"/>
    <group if="$(arg modified_state_publisher)">
        <node pkg="imitation_learning_ros_package"
              name="modified_state_publisher"
              type="modified_state_publisher.py"
              output="screen"/>
    </group>

    <arg name="modified_state_frame_visualizer" default="false"/>
    <group if="$(arg modified_state_frame_visualizer)">
        <node pkg="imitation_learning_ros_package"
              name="modified_state_frame_visualizer"
              type="modified_state_frame_visualizer.py"
              output="screen"/>
    </group>
    <!--######################## ACTOR NODES ########################-->
    <arg name="joystick" default="false"/>
    <group if="$(arg joystick)" ns="/actor/joystick">
        <arg name="joystick_config_file_path_with_extension"
             default="$(env CODEDIR)/src/sim/ros/config/actor/joystick_turtlebot_sim.yml"/>
        <rosparam command="load"
                  file="$(arg joystick_config_file_path_with_extension)"/>
        <!--<node pkg="imitation_learning_ros_package"
              type="dummy_joy.py"
              output="screen"
              ns="/actor/joystick"/>-->
        <node pkg="joy" name="joy_node" type="joy_node" output="screen" ns="/actor/joystick">
            <param name="dev" value="/dev/input/js0" />
            <param name="deadzone" value="0.2" />
            <param name="autorepeat_rate" value="20" />
        </node>
        <node pkg="imitation_learning_ros_package"
              name="teleop_twist_joystick"
              type="teleop_twist_joystick.py"
              output="screen"/>
    </group>

    <arg name="keyboard" default="false"/>
    <group if="$(arg keyboard)">
        <arg name="keyboard_config_file_path_with_extension"
             default="$(env CODEDIR)/src/sim/ros/config/actor/keyboard_turtlebot_sim.yml"/>
        <rosparam command="load"
                  file="$(arg keyboard_config_file_path_with_extension)"
                  ns="/actor/keyboard"/>
        <node pkg="imitation_learning_ros_package"
              name="teleop_twist_keyboard"
              type="teleop_twist_keyboard.py"
              output="screen"
              ns="/actor/keyboard"/>
    </group>

    <arg name="ros_expert" default="false"/>
    <group if="$(arg ros_expert)">
        <arg name="ros_expert_config_file_path_with_extension"
             default="$(env CODEDIR)/src/sim/ros/config/actor/ros_expert.yml"/>
        <rosparam command="load"
                  file="$(arg ros_expert_config_file_path_with_extension)"
                  ns="/actor/ros_expert"/>
        <node pkg="imitation_learning_ros_package"
              name="ros_expert"
              type="ros_expert.py"
              output="screen"
              ns="/actor/ros_expert"/>
    </group>

    <arg name="altitude_control" default="false"/>
    <group if="$(arg altitude_control)">
        <node pkg="imitation_learning_ros_package"
              name="altitude_control"
              type="altitude_control.py"
              output="screen"
              ns="/actor/altitude_control"/>
    </group>

    <arg name="dnn_actor" default="false"/>
    <group if="$(arg dnn_actor)">
        <arg name="dnn_actor_config_file_path_with_extension"
             default="$(env CODEDIR)/src/sim/ros/config/actor/dnn_actor.yml"/>
        <rosparam command="load"
                  file="$(arg dnn_actor_config_file_path_with_extension)"
                  ns="/actor/dnn_actor"/>
        <node pkg="imitation_learning_ros_package"
              name="dnn_actor"
              type="dnn_actor.py"
              output="screen"
              ns="/actor/dnn_actor"/>
    </group>

</launch>